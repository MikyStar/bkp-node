#!/usr/bin/env node

(()=>{"use strict";var e={42:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(s,i){function n(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,a)}c((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(519),n=r(176),a=s(r(74)),c=r(593),u=r(327),l=r(87),d=r(436),p=r(696),h=r(298);o(void 0,void 0,void 0,(function*(){try{const{action:e,sourcePath:t,destPath:r}=new n.ArgHandler,o=".archive.temp";switch(e){case n.Action.CREATE:{(0,c.printMessage)("Compression ..."),yield d.Archive.compress({sourcePath:t,destPath:o}),(0,c.printMessage)("done"),(0,c.printMessage)(""),(0,c.printMessage)("Encryption ...");const e=yield(0,h.secretPrompt)("Password: "),s=yield p.Encryption.encrypt({sourcePath:o,destPath:r,password:e});(0,c.printMessage)("done"),(0,c.printMessage)("Here is your initialization vector, you must store it as it is required to decrypt","red"),(0,c.printMessage)(["",s,""]);break}case n.Action.EXTRACT:{(0,c.printMessage)("Decryption ...");const e=yield(0,h.secretPrompt)("Password: "),s=yield(0,h.secretPrompt)("Initialization vector: ");yield p.Encryption.decrypt({sourcePath:t,destPath:o,password:e,initializationVector:s}),(0,c.printMessage)("done"),(0,c.printMessage)("Extraction ..."),yield d.Archive.extract({sourcePath:o,destPath:r}),(0,c.printMessage)("done");break}}i.System.deleteFile(o),i.System.exit(0)}catch(e){if(e instanceof u.CatchableError)if(e instanceof l.CLISyntaxError){const{message:t,manEntries:r,details:o}=e;(0,c.printError)([t,o]),r.forEach((e=>(0,c.printMessage)(["",...a.default.getMan(e)])))}else(0,c.printError)(e.message);else console.error(e);i.System.exit(-1)}}))},436:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(s,i){function n(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,a)}c((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Archive=void 0;const i=s(r(416)),n=r(290),a=r(176),c=r(519);!function(e){e.compress=({sourcePath:e,destPath:t})=>o(this,void 0,void 0,(function*(){try{c.System.isDirectory(e)?yield i.default[a.ARCHIVE_ALGO].compressDir(e,t):yield i.default[a.ARCHIVE_ALGO].compressFile(e,t)}catch(e){throw console.log(e),new n.CompressError(e)}})),e.extract=({sourcePath:e,destPath:t})=>o(this,void 0,void 0,(function*(){try{yield i.default[a.ARCHIVE_ALGO].uncompress(e,t)}catch(e){throw new n.ExtractError(e)}}))}(t.Archive||(t.Archive={}))},176:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,s)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ArgHandler=t.Flag=t.ENCRYPTION_ALGO=t.ARCHIVE_ALGO=t.Action=void 0;const n=r(519),a=r(87),c=r(5),u=r(593),l=i(r(74));var d,p;!function(e){e.CREATE="c",e.EXTRACT="x"}(d=t.Action||(t.Action={})),t.ARCHIVE_ALGO="tgz",t.ENCRYPTION_ALGO="aes-256-cbc",function(e){e.HELP="--help",e.VERSION="--version"}(p=t.Flag||(t.Flag={})),t.ArgHandler=class{constructor(){this.setAction=e=>{const t=["create",d.CREATE],r=["extract",d.EXTRACT];if(t.includes(e))this.action=d.CREATE;else{if(!r.includes(e))throw new a.FirstArgError(e);this.action=d.EXTRACT}},this.setSource=e=>{if(!n.System.doesFileExists(e))throw new c.FileNotFoundError(e);this.sourcePath=e},this.setDest=e=>{let t="";if(this.action===d.CREATE?t=e||this.sourcePath+l.DEFAULT_CREATE_EXTENSION:e?t=e:(new RegExp(`${l.DEFAULT_CREATE_EXTENSION}$`).test(this.sourcePath)&&(t=this.sourcePath.split(l.DEFAULT_CREATE_EXTENSION)[0]),t=this.sourcePath+l.DEFAULT_EXTRACT_EXTENSION),n.System.doesFileExists(t))throw new c.FileAlreadyExistsError(t);this.destPath=t},this.searchFlag=e=>void 0!==this.extractOccurances((t=>e.includes(t))),this.extractOccurances=e=>{const t=[];if(this.args.forEach(((r,o)=>{e(r,o)&&t.push({arg:r,index:o})})),0!==t.length){for(let e=t.length-1;e>=0;e--)this.args.splice(t[e].index,1);return t}},this.args=process.argv.slice(2),this.isVersion=this.searchFlag(["-v",p.VERSION]),this.isHelpNeeded=this.searchFlag(["-h",p.HELP]),this.isVersion&&((0,u.printMessage)(l.default.version),n.System.exit(0)),(this.isHelpNeeded||void 0===this.args[0])&&((0,u.printMessage)(l.default.fullMan()),n.System.exit(0)),this.setAction(this.args[0]),this.setSource(this.args[1]),this.setDest(this.args[2])}}},696:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(s,i){function n(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,a)}c((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Encryption=void 0;const i=s(r(113)),n=s(r(147)),a=r(186),c=r(176),u="useless salt";!function(e){e.encrypt=({sourcePath:e,destPath:t,password:r})=>o(this,void 0,void 0,(function*(){return new Promise(((o,s)=>{const l=n.default.createReadStream(e),d=n.default.createWriteStream(t),p=i.default.scryptSync(r,u,32),h=i.default.randomBytes(16),f=i.default.createCipheriv(c.ENCRYPTION_ALGO,p,h);l.pipe(f).pipe(d),d.on("finish",(()=>o(h.toString("hex")))),d.on("error",(()=>s(new a.EncryptError)))}))})),e.decrypt=({sourcePath:e,destPath:t,password:r,initializationVector:s})=>o(this,void 0,void 0,(function*(){return new Promise(((o,l)=>{const d=n.default.createReadStream(e),p=n.default.createWriteStream(t),h=i.default.scryptSync(r,u,32),f=Buffer.from(s,"hex"),E=i.default.createDecipheriv(c.ENCRYPTION_ALGO,h,f);d.pipe(E).pipe(p),p.on("finish",(()=>o(!0))),p.on("error",(()=>l(new a.DecryptError)))}))}))}(t.Encryption||(t.Encryption={}))},74:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_EXTRACT_EXTENSION=t.DEFAULT_CREATE_EXTENSION=void 0;const s=o(r(22)),i=o(r(598)),n=r(176);t.DEFAULT_CREATE_EXTENSION=".bkp",t.DEFAULT_EXTRACT_EXTENSION=".dec",t.default=new class{constructor(){this.getMan=e=>this.makeMan(Object.assign(Object.assign({},this[e]),{footer:!0})),this.fullMan=()=>{let e=[];return["create","extract"].forEach((t=>{const r=this.makeMan(Object.assign(Object.assign({},this[t]),{footer:!1}));e=[...e,...r,"","-----",""]})),[...this.header,...e,...this.footer]},this.handleAction=e=>{let t=[];switch(e){case n.Action.CREATE:t=this.getMan("create");break;case n.Action.EXTRACT:t=this.getMan("extract")}return t},this.makeMan=e=>{const{bold:t,underline:r}=s.default;let o=[];return e.title&&(o=[...o,r(e.title),""]),e.prototype&&(o=[...o,t(e.prototype),""]),e.argDef&&(o=[...o,...e.argDef]),e.furtherDescription&&(o=[...o,"",...e.furtherDescription]),e.examples&&(o=[...o,"",r("Examples :"),"",...e.examples]),o};const{bold:e}=s.default;this.header=["",`Create and extract backups of a file or directory compressed with ${s.default.bold("tgz")} and encrypted`,`with ${s.default.bold("aes-256-cbc")} with both your password and a generated initialization vector`,"","-----",""],this.footer=["","-----",`${e(i.default.name)}: ${i.default.description}`,`Version: ${e(i.default.version)}`,`More informations and examples at ${e(i.default.repository.url)}`],this.version=[`${i.default.version}`],this.create={title:"Create a compressed, encrypted backup",prototype:"bkp <c|create> <source path> [<destination path>]",argDef:["<source path> : Absolute or relative path to what you want to backup","[<destination path>] : Optional, absolute or relative path to where you want your",`                       backup file ${s.default.bold(`default: '${t.DEFAULT_CREATE_EXTENSION}'`)}`],furtherDescription:["It will then prompt you for the password you want to set",`After encryption, a initialization vector will be outputed, ${s.default.bold.red("you must store it in order to decrypt afterwards")}`]},this.extract={title:"Extract the content of a backup",prototype:"bkp <x|extract> <source path> [<destination path>]",argDef:["<source path> : Absolute or relative path to your backup location","[<destination path>] : Optional, absolute or relative path to where you want your clear content,","                       if you have used the default '.bkp' extension it will be trimmed, otherwise it will append ",`                       the ${s.default.bold(`prefix: '${t.DEFAULT_EXTRACT_EXTENSION}'`)}`],furtherDescription:["It will then prompt you for the password you have set","Then, you provide the initialization vector that was generated during the backup creation"]}}}},593:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.printError=t.printMessage=void 0;const s=o(r(22));t.printMessage=(e,t)=>{""!==e&&e!==[]&&(e=Array.isArray(e)?e:[e]).forEach((e=>{let r=e;r=t?s.default[t](r):r,console.log(r)}))},t.printError=e=>(0,t.printMessage)(e,"red")},298:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(s,i){function n(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,a)}c((o=o.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.secretPrompt=void 0;const i=s(r(726));t.secretPrompt=e=>o(void 0,void 0,void 0,(function*(){return yield(0,i.default)(e,{method:"hide"})}))},519:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.System=void 0;const s=o(r(147)),i=o(r(17)),n=r(5);var a;(a=t.System||(t.System={})).exit=(e=0)=>process.exit(e),a.getAbsolutePath=e=>i.default.isAbsolute(e)?e:i.default.join(process.cwd(),e),a.doesFileExists=e=>s.default.existsSync(a.getAbsolutePath(e))||!1,a.isDirectory=e=>{const t=a.getAbsolutePath(e);if(s.default.lstatSync(t).isDirectory())return!0;if(s.default.lstatSync(t).isFile())return!1;throw new n.FileTypeError(e)},a.deleteFile=e=>{const t=a.getAbsolutePath(e);s.default.rmSync(t)}},290:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtractError=t.CompressError=void 0;const o=r(327);class s extends o.CatchableError{constructor(e){super("An error occured during compression",e)}}t.CompressError=s;class i extends o.CatchableError{constructor(e){super("An error occured during extraction",e)}}t.ExtractError=i},87:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtractError=t.CreateError=t.FirstArgError=t.CLISyntaxError=void 0;const o=r(327);class s extends o.CatchableError{constructor(e,t,r){super(e,r),this.manEntries=t}}t.CLISyntaxError=s,t.FirstArgError=class extends s{constructor(e,t){super(`First argument '${e}' unrecognized`,["create","extract"],t)}},t.CreateError=class extends s{constructor(e,t){super(e,["create"],t)}},t.ExtractError=class extends s{constructor(e,t){super(e,["extract"],t)}}},327:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CatchableError=void 0;class r extends Error{constructor(e,t){super(e),this.details=t}}t.CatchableError=r},186:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DecryptError=t.EncryptError=void 0;const o=r(327);class s extends o.CatchableError{constructor(e){super("An error occured during encryption",e)}}t.EncryptError=s;class i extends o.CatchableError{constructor(e){super("An error occured during decryption",e)}}t.DecryptError=i},5:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileTypeError=t.SaveFileError=t.FileAlreadyExistsError=t.FileNotFoundError=void 0;const o=r(327);class s extends o.CatchableError{constructor(e,t){super(`File '${e}' can't be found`,t)}}t.FileNotFoundError=s;class i extends o.CatchableError{constructor(e){super(`File ${e} already exists`)}}t.FileAlreadyExistsError=i;class n extends o.CatchableError{constructor(e,t){super(`Problem saving ${e} `,t)}}t.SaveFileError=n;class a extends o.CatchableError{constructor(e,t){super(`Path '${e}' should reference a file or directory`,t)}}t.FileTypeError=a},22:e=>{e.exports=require("chalk")},416:e=>{e.exports=require("compressing")},726:e=>{e.exports=require("password-prompt")},113:e=>{e.exports=require("crypto")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")},598:e=>{e.exports=JSON.parse('{"name":"bkp-node","version":"1.1.0","description":"A CLI tool to handle encrypted compressed backups of files or directory","keywords":["backup","archive","encrypt","cli"],"author":"Mike AUBENAS","license":"MIT","bin":{"bkp":"./bin/cli.js"},"files":["src","bin/cli.js"],"main":"src/Main.ts","repository":{"type":"git","url":"https://github.com/MikyStar/bkp-node"},"scripts":{"dev":"nodemon","start":"NODE_ENV=dev npm run build && node build/Main.js","build":"webpack-cli","make-binary":"./scripts/make-binary.sh","prepublishOnly":"npm run make-binary","security:audit":"npm audit --production --audit-level=moderate --registry=https://registry.npmjs.org","security:fix":"npm audit fix --production --audit-level=moderate --registry=https://registry.npmjs.org","dependencies:check":"ncu -e 2","dependencies:update":"ncu -u && npm run clear && npm install && npm run security:audit","clear":"rm -rf node_modules build bin"},"devDependencies":{"tslint":"^5.20.1","typescript":"^4.6.3"},"dependencies":{"@types/jest":"^28.1.4","@types/node":"^18.0.3","@types/prompts":"^2.0.14","chalk":"^4.1.2","compressing":"^1.6.0","dotenv":"^16.0.0","jest":"^28.1.2","password-prompt":"^1.1.2","ts-loader":"^9.2.9","ts-node":"^10.7.0","webpack":"^5.72.0","webpack-cli":"^4.9.2","webpack-node-externals":"^3.0.0"}}')}},t={},r=function r(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,r),i.exports}(42);for(var o in r)this[o]=r[o];r.__esModule&&Object.defineProperty(this,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,